OSM Mapnik Stylesheet Editing Tutorial
======================================

# Description

These notes are designed to show a user how to modify a
mapnik xml stylesheet suitable for rendering in any program
that uses mapnik as rendering engine (e.g. nik2img, mod\_tile,
tilelite, tilestache, etc.)

The user will modify the a copy of the osm.xml stylesheet,
the base stylesheet for <http://openstreetmap.org>. 
**NOTE:** This stylesheet has been updated for mapnik2 syntax
using the `upgrade_map_xml.py` script. Please see <http://trac.mapnik.org/wiki/Mapnik2/Changes>
for a detailed explanation of differences between mapnik 0.7.x and mapnik2.

# Prequisites

# Instructions

## Copy osm2.xml

To begin modification of the stylesheet, create a working copy of it.

    $ cp /path/to/repo/mkgc_workshop/mapnik_workshop/styles/workshop/osm2.xml workshop.xml

## Truncate workshop.xml

We will remove all styles and layers from the copy, creating a base
to re-add only those layers which we wish to render. We will use VIM
to perform this operation. However, you can use any text editor.

As an alternative (and maybe faster/cleaner) workflow, you can start
from a blank stylesheet.

    $ vim workshop.xml

Create a mapping on the `z` key which will recursively delete all
occurances of the `<Style>` tag along with their contents, including
nested tags.

    :map z /<Style name/ <Esc> dat jz

Press `z` to execute your keymapping. All `<Style>` elements should
now be deleted from the document. Now we're going to repeat the process
for `<Layer>` elements **NOTE:** I had to run this key mapping several
times to delete all instances of the `<Layer>` tag.

    :map z /<Layer name/ <Esc> dat jz

Remove all lines which are pure whitespace

    :g/^\s*$/d

## Open osm2.xml As Split-Screen

Later steps in this guide will focus on extracting layer and style definitions
from the default osm2.xml stylesheet, and placing them into our new working
xml file. In order to facilitate easier copy-and-paste operations, we'll be
using VIM's split-screen capabilities.

If `workshop.xml` is not open, open it now.

    $vim workshop.xml

Open a new split-screen viewport, while also opening a directory tree allowing
a file to be selected for editing.

    :split .

The top-half of the screen should now display a directory tree, while the
bottom half should contain your copy of `workshop.xml`. Using the arrow keys
navigate to `osm2.xml` and hit `ENTER` to open the file for editing.

## Copying a `<Layer>` and `<Style>`

Mapnik XML syntax breaks down renderable objects into two discrete parts,
the `<Layer>` element which contains information about the which data to
retrieve from the database, the extents of the layer, etc; and the `<Style>`
element, which contains information on how those pieces of data should be
rendered by mapnik. Because of this, whenever we want to render a new piece
of data, such as a school, road, or park, we will need to ensure that we
create both a `<Layer>` instructing mapnik on what we're rendering, as well
as a `<Style>` which will tell mapnik how we want it to look.

This example will walk through the import of the **buildings** layer from
`osm2.xml` to our working copy of the xml file.

From the split screen, perform a search for the buildings layer.

    /<Layer name="buildings"

Enter VISUAL mode, and yank the `<Layer>` tag and its contents,
including nested tags.

    vaty

Switch to the working xml file, in the bottom split-screen.

    Ctrl-W j

Move the cursor into a blank line above the closing `</map>` tag,
and paste the buildings layer with the `p` key.

Looking at the newly copied `<Layer>` tag, we can see that it references
a single style, `<StyleName>buildings</StyleName>`. **NOTE:** There does
not necessarilly need to be a one-to-one relationship between styles and
layers. A layer can be represented by multiple styles, and a style can
appear in multiple layers.

Switch back to the working xml file, and search for the building `<style>`.

    Ctrl-W k
    /<Style name="buildings"

Yank the style

    vaty

Switch back to the working xml file, and paste the style above the `<Layer>`
element.

    Ctrl-W j
    p

**NOTE:** If you need to create a newline to paste your `<style>` tag into,
use `Shift-O` from Normal mode. This automatically force VIM to enter Insert
mode though, so press `ESC` to exit. After your newline has been created, you
can use `p` to paste into it.
