#### PLANET UPLOADS NOTES ####

#### Edit a couple parameters in postgresql.conf for tuning ####
## These increase the postgresql shared buffer through RAM
## and allows postgres backend quicker access to reads and writes 
## before talking with disk
shared_buffers = 3000MB   # Set this to 25% of your total RAM 
Added "kernel.shmmax=3221159936" into /etc/sysct.conf to support the need for larger shared memory #this was tested first w/ command "sudo /sbin/sysctl -w kernel.shmmax=3221159936"
bgwriter_delay = 2000ms  # I don't know what a good value is, but since we're loading a lot of data, larger sounds better


## Remember, above tunings are not enough for fast planet import
## osm2pgsql takes a -C switch (see below) which increases the buffering of disk I/O through RAM.
## This increased planet import time considerably on parsing NODES 
## when we set switch to -C 10000MB (almost all of available RAM).
## Jury is still out as to what else we can do to make this faster.
## We saw a lot of swap page-in activity with above tunings and could possibly do better with less 
## buffer cache set aside and increasing postgresql shared buffer past 25%


## Uncomment last four last lines of default.style to create columns for extra attributes
## So they look like the following lines
"""
#The following entries can be used with the --extra-attributes option
# to include the username, userid, version & timstamp in the DB
node,way  osm_user       text
node,way  osm_uid        text
node,way  osm_version    text
node,way  osm_timestamp  text
"""


## Unzip bz2 and rezip as gzip for performance
## NOTE: We never got this working. So it is still unresolved 
## to how much this will help
bzcat planet-latest.osm.bz2 | gzip > planet-latest.osm.gz


#### createdb and add intarry support ####
createdb -T template_postgis -O postgres planet0304
psql -d planet0304 -f /usr/local/pgsql/share/contrib/_int.sql


#### use screen and love it! ####
## import of planet data should be done in screen with multiuser on and everyone's name added using acladd
## to create a screen as root, only way to share we know of now
sudo screen -S <name_of_screen>
## to share this screen with multi users, once in screen
CTRL-A, then SHIFT :, then type "multiuser on", then hit enter
## then you have to add users
CTRL-A, then SHIFT :, then type "acladd <user_name>" # for user to share
share with
## we are still unsure about whether groups (like cugos can share multiuser), must check


#### set up some system monitoring logs for later inspection ####
## This proves useful to go back and compare to what's happening in program.
## This is a script gcorradini wrote and it's by no means pretty or succintly useful ;
## The cron job that runs this script is listed below
	#!/bin/bash
	TIMESTAMP=$(date +%m/%d/%y.%H:%M:%S)
	echo ""
	echo ""
	echo "####################################################################"
	echo "####################################################################"
	echo "SAMPLE @ >>> " $TIMESTAMP
	echo "####################################################################"
	echo "####################################################################"
	echo ""
	echo ""
	echo "######## vmstat output #########################"
	vmstat 1 4
	echo "######## process tree for user postgres  #######"
	#ps -ALF | sort -nr -k 4 | head -30
	ps -U postgres -H
	echo "######## process tree -F user postgres #########"
	ps -U postgres -jHF
	echo "######## thread listing for user postgres ######"
	#ps -ALF | sort -nr -k 3 | head -30
	ps -U postgres -LF
	echo "######## process size/thread cnt postgres ######"
	ps -U postgres -o pid,nlwp,vsz,args
	echo "######## free output by MB  ####################"
	free -m
	echo "######## loading average #######################"
	uptime
## Here's the cron job
## gcorradini often went in at different points of osm2pgsql execution to 
## change the time parameter
*/15 * * * * /mnt/travel-disk/planet_download/pimp-logger.sh >> /mnt/travel-disk/planet_download/pimp_log.txt 2>&1


#### once in screen do import of planet as postgres user ####
## -su to postgres user
sudo su - postgres
cd /mnt/z-raid6/gis/osm/extracts/planet_dumps/ or /mnt/travel-disk/planet_downloads
## run osm2pgsql
## the last run starting on 03/04/11 we used this osm2pgsql statement
## osm2pgsql --slim -d planet0304 -x -H localhost -P 5432 -C 8500 -S /usr/local/share/osm2pgsql/default.style planet-latest.osm.bz2


#### --appending planet daily diff files with osm2pgsql ####
## daily diffs are located in /mnt/z-raid6/gis/osmosis_working/daily_diffs
## everything in /mnt/z-raid6/gis/osmosis_working/ is valuable if directory is squeaky clean.
## So here is a description of files in /mnt/z-raid6/gis/osmosis_working that are needed
1. configuration.txt, configuration.txt.bak, state.txt --> all related to osmosis working space configuration for getting minutely and hourly diffs
2. changes.osc.gz --> a zip file of changes that was probably pulled down from osmosis program
3. logs --> logs about osmosis program incorporating daily and hourly diffs
4. import_changes.sh --> a bash script showing how mkenny imported daily diffs into sfo test dataset
5. update-db.sh --> a bash script added to cronjob showing how mkenny got synched minutely updates using osmosis and osm2pgsql



#### osm2pgsql script for applying daily diffs to planetimport.
#### this is an old version. See new and improved version below
DIFFDIR="/mnt/z-raid6/gis/osmosis_working/daily_diffs/"
SUFFIX="gz"
HOST=$(hostname|cut -f1 -d.)
TIMESTAMP=$(date +%m/%d/%y.%H:%M:%S)
LOGDIR="/mnt/z-raid6/gis/osmosis_working/logs"
LOGFILE=${HOST}."planetimport".${TIMESTAMP}."_log_".txt
touch $LOGDIR/$LOGFILE

for diff in  "$DIFFDIR"/*.$SUFFIX
do
        echo "TARGET DIFF >>> " $diff " START processing at >>> " $TIMESTAMP #> $LOGDIR/$LOGFILE
        osm2pgsql --append --slim -d planetimport -H localhost -P 5432 -S /usr/local/share/osm2pgsql/default.style $diff
        ENDTIMESTAMP=$(date +%m/%d/%y.%H:%M:%S)
        echo "TARGET DIFF >>> " $diff " END processing at >>> " $ENDTIMESTAMP #> $LOGDIR/$LOGFILE
done   
#### new and improved daily diff osm2pgsql script
#!/bin/bash
for FILE in $(find *.gz -type f);
do
    BEGTIMESTAMP_PDT=$(date)
    BEGTIMESTAMP_UTC=$(TZ=UTC date)
    echo "\nStarting daily diff append " $FILE " at >>> " $BEGTIMESTAMP_PDT >> update_daily_diff.log 2>&1
    echo "\nUTC Time currently >>> " $BEGTIMESTAMP_UTC "\n"  >> update_daily_diff.log 2>&1

    /usr/local/src/osm2pgsql/osm2pgsql --append --slim -d planet0304 -H localhost -P 5432 -C 2500 -S /usr/local/share/osm2pgsql/default.style $FILE >> update_daily_diff.log 2>&1

    ENDTIMESTAMP_PDT=$(date)
    ENDTIMESTAMP_UTC=$(TZ=UTC date)
    echo "\nEnded daily diff append " $FILE " at >>> " $ENDTIMESTAMP_PDT  >> update_daily_diff.log 2>&1
    echo "\nUTC Time currently >>> " $ENDTIMESTAMP_UTC "\n"  >> update_daily_diff.log 2>&1

done;

exit 0



#### osm2pgsql / osmosis script used for hourly and minutely diffs (in osmosis working directory as update-daily.sh script)
#!/bin/bash
TIMESTAMP_PDT=$(date)
TIMESTAMP_UTC=$(TZ=UTC date)

if [ -e /mnt/z-raid6/gis/osmosis_working/download.lock ]
then
    echo
    echo "  >>> UPDATE ATTEMPTED  @ " $TIMESTAMP_PDT
    echo "  >>> CURRENT UTC TIME  @ " $TIMESTAMP_UTC
else
    touch /mnt/z-raid6/gis/osmosis_working/download.lock
    
    echo
    echo "START >>> osmosis minutely diffs at " $TIMESTAMP_PDT
    echo "        >>> CURRENT UTC TIME at " $TIMESTAMP_UTC  

    /usr/local/src/osmosis/osmosis-0.38/bin/osmosis --read-replication-interval workingDirectory=/mnt/z-raid6/gis/osmosis_working/ --simplify-change --write-xml-change /mnt/z-raid6/gis/osmosis_working/changes.osc.gz

    /usr/local/src/osm2pgsql/osm2pgsql --append --slim -d planet0304 -H localhost -P 5432 -C 3000 -S /usr/local/share/osm2pgsql/default.style /mnt/z-raid6/gis/osmosis_working/changes.osc.gz
 
    rm /mnt/z-raid6/gis/osmosis_working/download.lock

    ENDTIMESTAMP_PDT=$(date)
    ENDTIMESTAMP_UTC=$(TZ=UTC date)
    
    echo
    echo "FINISHED >>> osmosis minutely diffs at " $ENDTIMESTAMP_PDT
    echo "           >>> CURRENT UTC TIME at " $ENDTIMESTAMP_UTC

fi
